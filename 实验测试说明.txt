------------编译程序-----------------
./run.sh


------------test1-----------------
运行：./run.sh test1

说明： 
    ld r1,0(r0)
    0000000 00000 00000 011 00001  0000011
    ld r2,8(r0)
    0000000 01000 00000 011 00010  0000011
    ld r3,16(r0)
    0000000 10000 00000 011 00011  0000011
    ld r4,24(r0)
    0000000 11000 00000 011 00100  0000011
    ld r5,32(r0)
    0000001 00000 00000 011 00101  0000011
    ld r6,40(r0)
    0000001 01000 00000 011 00110  0000011

    sd r1,48(r0)
    0000001 00001 00000 011 10000  0100011
    sd r2,56(r0)
    0000001 00010 00000 011 11000  0100011
    sd r3,64(r0)
    0000010 00011 00000 011 00000  0100011
    sd r4,72(r0)
    0000010 00100 00000 011 01000  0100011
    sd r5,80(r0)
    0000010 00101 00000 011 10000  0100011
    sd r6,88(r0)
    0000010 00110 00000 011 11000  0100011


------------test2-----------------
运行： ./run.sh test2
说明： 将0地址的数据+8后，放入4的位置; 0地址数据为13
    lw r1,0(r0)
    addi rd1 = rs1 + 4
    sw r1,4(r0)

    lw rd[1] = Memory[ rs[0] + 0 ] // 取第一个数，放到寄存器1
    0000000 00000 00000 010 00001  0000011

    addi rd[1] = rs[1] + 8 // 1号寄存器加8
    0000000 01000 00001 000 00001  0010011  

    sw Memory[ rs[0] + 4] = rs[1] // 将rs1中数据，放入到memory 4的位置
    0000000 00001 00000 010 00100  0100011 

结果： ./test/test2/dmemresult.txt
    00000000
    00000000
    00000000
    00001101
    00000000
    00000000
    00000000
    00010101        // 结果 21

------------test3-----------------
运行： ./run.sh test3
说明：将0地址数据，与4地址数据相加，再被8地址数据减； 0地址数据为4，4地址数据为3，8地址数据为2
    lw r1,0(r0)
    lw r2,4(r0)
    lw r3,8(r0)
    add r1,r1,r2        // [r1]=[r1]+[r2]
    sub r1,r3,r1        // [r1]=[r3]-[r1]
    sw r1,12(r0)

    lw r1,0(r0)
    0000000 00000 00000 010 00001  0000011
    lw r2,4(r0)
    0000000 00100 00000 010 00010  0000011
    lw r3,8(r0)
    0000000 01000 00000 010 00011  0000011
    add r1,r1,r2        // [r1]=[r1]+[r2]
    0000000 00010 00001 000 00001  0110011
    sub r1,r3,r1        // [r1]=[r3]-[r1]
    0100000 00001 00011 000 00001  0110011
    sw r1,12(r0)
    0000000 00001 00000 010 01100  0100011 

结果： ./test/test3/dmemresult.txt
    00000000
    00000000
    00000000
    00000100    // 4
    00000000
    00000000
    00000000
    00000011    // 3
    00000000
    00000000
    00000000
    00000010    // 2
    11111111
    11111111
    11111111
    11111011    // -5


------------test4-----------------
运行： ./run.sh test4
说明：
    汉诺塔：输入 1，2，4  输出 13

    addi rd[5] = rs[5] + 1 // 5号寄存器加1
    0000000 00001 00101 000 00101  0010011  
    lw rd[1] = Memory[ rs[0] + 0 ] // 取第一个数，放到寄存器1
    0000000 00000 00000 010 00001  0000011
    lw rd[2] = Memory[ rs[0] + 4 ] // 取第二个数，放到寄存器2
    0000000 00100 00000 010 00010  0000011
    lw rd[6] = Memory[ rs[0] + 8 ] // 6号寄存器取第三个数
    0000000 01000 00000 010 00110  0000011
     
    add rd[3] = rs[1] + rs[2] // 1号寄存器和2号寄存器相加放到3号寄存器
    0000000 00010 00001 000 00011  0110011  
    addi rd[4] = rs[4] + 1 // 4号寄存器加1
    0000000 00001 00100 000 00100  0010011  
    and rd[4] = rs[4] & rs[5] // 4号寄存器与1做与操作，结果放入4号寄存器，由于没有实现andi指令，所以只能使用and
    0000000 00101 00100 111 00100 0110011  
    sub rd[6] = rs[6] - rs[5]  // 6号寄存器减1
    0100000 00101 00110 000 00110  0110011 
    beq if rs[6] == rs[15] { PC += 24}  // 如果6号寄存器为0，则终止
    0000000 01111 00110 000 01100  1100011 
    beq if rs[4] == rs[5] { PC += 12}  // 如果4号寄存器==5 ,那么把最大的数移到1号寄存器
    0000000 00101 00100 000 00110  1100011 
    addi rd[2] = rs[3] + 0 // 把最大的数放到2号寄存器
    0000000 00000 00011 000 00010  0010011 
    jal  PC = PC  + 4 - 32 // 继续做加法， 11111111111111111111111111011100
    1111111 10001 11111 111 11111  1101111 
    addi rd[1] = rs[3] + 0 // 把最大的数放到1号寄存器
    0000000 00000 00011 000 00001  0010011 
    jal  PC = PC  +4 - 40 // 继续做加法， 11111111111111111111111111011100
    1111111 01101 11111 111 11111  1101111 
    sw Memory[ rs[0] + 12] = rs[3] // 把最大的数存到data memory中
    0000000 00011 00000 010 01100  0100011 
    // 终止
    11111111 11111111 11111111 11111111

结果： ./test/test4/dmemresult.txt
    00000000
    00000000
    00000000
    00000001
    00000000
    00000000
    00000000
    00000010
    00000000
    00000000
    00000000
    00000100
    00000000
    00000000
    00000000
    00001101        // 结果13


